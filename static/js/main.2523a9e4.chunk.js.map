{"version":3,"sources":["SafeTransactionReader.js","components/index.js","hooks/useWeb3Modal.js","graphql/subgraph.js","components/Requests.jsx","App.js","index.js"],"names":["baseURI","sortPendingRequests","requests","filter","request","isExecuted","sortCompletedRequests","sortRequests","dataDecoded","method","getTransactions","setPendingRequests","setCompletedRequests","setRequests","setLoaded","a","fetch","json","response","results","length","loadMetadata","metadata","setMetadata","setIsLoaded","version","nonce","hashInBytes","parameters","value","str","slice","hash","Buffer","toString","data","JSON","parse","Header","styled","header","Body","div","Button","img","attrs","target","rel","button","props","hidden","INFURA_ID","NETWORK","useWeb3Modal","config","useState","provider","setProvider","autoLoaded","setAutoLoaded","autoLoad","infuraId","network","web3Modal","useMemo","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","loadWeb3Modal","useCallback","connect","newProvider","Web3Provider","logoutOfWeb3Modal","clearCachedProvider","window","location","reload","useEffect","cachedProvider","GET_TRANSFERS","gql","Request","isLoaded","style","color","Requests","title","Tab","Container","id","defaultActiveKey","Row","Col","sm","ListGroup","map","index","Item","action","href","Content","Pane","eventKey","WalletButton","account","setAccount","rendered","setRendered","listAccounts","accounts","lookupAddress","name","substring","console","error","fetchAccount","onClick","App","useQuery","loading","pendingRequests","completedRequests","React","transfers","log","client","ApolloClient","uri","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.2523a9e4.chunk.js","sourcesContent":["const SAFE = \"0x52F50f557704938Df066EC4Db7426D66538E7796\";\n\nconst baseURI = `https://safe-transaction.gnosis.io/api/v1/safes/${SAFE}/multisig-transactions/`;\n\nconst sortPendingRequests = (requests) =>\n  requests.filter((request) => !request.isExecuted);\n\nconst sortCompletedRequests = (requests) =>\n  requests.filter((request) => request.isExecuted);\n\nconst sortRequests = (requests) =>\n  requests.filter(\n    (request) =>\n      request.dataDecoded.method === \"deployLBPManager\" ||\n      request.dataDecoded.method === \"deploySeed\"\n  );\n\nexport const getTransactions = async (\n  setPendingRequests,\n  setCompletedRequests,\n  setRequests,\n  setLoaded\n) => {\n  const response = await (await fetch(baseURI)).json(); // this will return all the transactions done using Gnosis Safe\n  const requests = sortRequests(response.results); // this will just keep transactions that are `deploySeed` or `deployLbpManager`\n  setRequests(requests); // for the application, setting sate\n  setPendingRequests(\n    // for the application, setting state\n    sortPendingRequests(requests) // sorting transactions based on if they are executed or not\n  );\n  setCompletedRequests(\n    // for the application, setting state\n    sortCompletedRequests(requests) // sorting transactions based on if they are executed or not\n  );\n  if (requests.length) setLoaded(true); // for the application, setting state\n};\n\nfunction hexToString(str) {\n  // for converting the hexadecimal to string\n  const buf = new Buffer(str, \"hex\");\n  return buf.toString(\"utf8\");\n}\n\nexport const loadMetadata = async (\n  request,  // the transaction object that is returned by Gnosis Safe\n  metadata, // for application, using state\n  setMetadata,  // for application, using state\n  setIsLoaded   // for application, using state\n) => {\n  if (!metadata?.version && request?.nonce) {\n    const hashInBytes =\n      request.dataDecoded.parameters[request.dataDecoded.parameters.length - 1] // deploySeed and deployLbpManager have different number of parameters\n        .value;\n    const hash = hexToString(hashInBytes.slice(2));\n    const response = await fetch(`https://ipfs.io/ipfs/${hash}`);\n    const data = await response.json();\n    setMetadata(JSON.parse(data));\n    if (data) {\n      setIsLoaded(true);\n    }\n  }\n};\n\n// How a transaction returned from Gnosis looks like\n//   \n//       {\n//         \"safe\": \"0x52F50f557704938Df066EC4Db7426D66538E7796\",\n//         \"to\": \"0xf50c85e4F8903b38Cd6Cc2D73678a5BE1FaC5e0a\",\n//         \"value\": \"0\",\n//         \"data\": \"0xfd3bd38a00000000000000000000000093b7a833d0e0990cf1d68ef47d90b9c6f46a1a2f00000000000000000000000052f50f557704938df066ec4db7426d66538e7796000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000...\",\n//         \"operation\": 0,\n//         \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n//         \"safeTxGas\": 704169,\n//         \"baseGas\": 0,\n//         \"gasPrice\": \"0\",\n//         \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n//         \"nonce\": 11,\n//         \"executionDate\": null,\n//         \"submissionDate\": \"2021-12-26T02:41:59.236024Z\",\n//         \"modified\": \"2021-12-26T02:41:59.236024Z\",\n//         \"blockNumber\": null,\n//         \"transactionHash\": null,\n//         \"safeTxHash\": \"0x1b0a7c2d53a15348823dd91d6c2270668f46a175868e0677f7f3fe534137c58d\",\n//         \"executor\": null,\n//         \"isExecuted\": false,\n//         \"isSuccessful\": null,\n//         \"ethGasPrice\": null,\n//         \"gasUsed\": null,\n//         \"fee\": null,\n//         \"origin\": null,\n//         \"dataDecoded\": {     \n//                          // This is where we find details of the method that is going to be invoked  \n//                          // This is only going to be returned if the contract is verified on etherscan, \n//                          // else, they won't be able to decode the data\n//           \"method\": \"deployLBPManager\",\n//           \"parameters\": \"[{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, …]\"\n//         },\n//         \"confirmationsRequired\": null,\n//         \"confirmations\": [],\n//         \"signatures\": null\n//       },\n\n","import styled from \"styled-components\";\n\nexport const Header = styled.header`\n  background-color: #282c34;\n  min-height: 70px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  color: white;\n`;\n\nexport const Body = styled.div`\n  align-items: center;\n  background-color: #282c34;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n  justify-content: center;\n  min-height: calc(100vh - 70px);\n`;\n\nexport const Image = styled.img`\n  height: 40vmin;\n  margin-bottom: 16px;\n  pointer-events: none;\n`;\n\nexport const Link = styled.a.attrs({\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n})`\n  color: #61dafb;\n  margin-top: 10px;\n`;\n\nexport const Button = styled.button`\n  background-color: white;\n  border: none;\n  border-radius: 8px;\n  color: #282c34;\n  cursor: pointer;\n  font-size: 16px;\n  text-align: center;\n  text-decoration: none;\n  margin: 0px 20px;\n  padding: 12px 24px;\n\n  ${props => props.hidden && \"hidden\"} :focus {\n    border: none;\n    outline: none;\n  }\n`;\n","import { Web3Provider } from \"@ethersproject/providers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Web3Modal from \"web3modal\";\n\n// Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\nconst INFURA_ID = \"INVALID_INFURA_KEY\";\n\nconst NETWORK = \"mainnet\";\n\nfunction useWeb3Modal(config = {}) {\n  const [provider, setProvider] = useState();\n  const [autoLoaded, setAutoLoaded] = useState(false);\n  const { autoLoad = true, infuraId = INFURA_ID, network = NETWORK } = config;\n\n  // Web3Modal also supports many other wallets.\n  // You can see other options at https://github.com/Web3Modal/web3modal\n  const web3Modal = useMemo(() => {\n    return new Web3Modal({\n      network,\n      cacheProvider: true,\n      providerOptions: {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId,\n          },\n        },\n      },\n    });\n  }, [infuraId, network]);\n\n  // Open wallet selection modal.\n  const loadWeb3Modal = useCallback(async () => {\n    const newProvider = await web3Modal.connect();\n    setProvider(new Web3Provider(newProvider));\n  }, [web3Modal]);\n\n  const logoutOfWeb3Modal = useCallback(\n    async function () {\n      await web3Modal.clearCachedProvider();\n      window.location.reload();\n    },\n    [web3Modal],\n  );\n\n  // If autoLoad is enabled and the the wallet had been loaded before, load it automatically now.\n  useEffect(() => {\n    if (autoLoad && !autoLoaded && web3Modal.cachedProvider) {\n      loadWeb3Modal();\n      setAutoLoaded(true);\n    }\n  }, [autoLoad, autoLoaded, loadWeb3Modal, setAutoLoaded, web3Modal.cachedProvider]);\n\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;\n","import { gql } from \"apollo-boost\";\n\n// See more example queries on https://thegraph.com/explorer/subgraph/paulrberg/create-eth-app\nconst GET_TRANSFERS = gql`\n  {\n    transfers(first: 10) {\n      id\n      from\n      to\n      value\n    }\n  }\n`;\n\nexport default GET_TRANSFERS;\n","import { useEffect, useState } from \"react\";\nimport { Tab, Row, Col, ListGroup } from \"react-bootstrap\";\nimport { JsonToTable } from \"react-json-to-table\";\nimport {loadMetadata} from \"../SafeTransactionReader\";\n\nconst Requests = ({ requests, title }) => {\n  const [metadatas, setMetadata] = useState();\n\n  const renderRequestItems = () => {\n    return requests.map((request, index) => (\n      <ListGroup.Item action href={`#link${index + 1}`} key={request.nonce}>\n        {`${request.nonce}`}\n      </ListGroup.Item>\n    ));\n  };\n\n  const renderRequestPanes = () => {\n    return requests.map((request, index) => (\n      <Tab.Pane eventKey={`#link${index + 1}`} key={request.nonce}>\n        <Request request={request} />\n      </Tab.Pane>\n    ));\n  };\n\n  useEffect(() => {});\n  return (\n    <>\n      <h1>{title}</h1>\n      <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#link1\">\n        <Row>\n          <Col sm={4}>\n            <ListGroup>{renderRequestItems()}</ListGroup>\n          </Col>\n          <Col sm={8}>\n            <Tab.Content>{renderRequestPanes()}</Tab.Content>\n          </Col>\n        </Row>\n      </Tab.Container>\n    </>\n  );\n};\n\nconst Request = ({ request }) => {\n  const [metadata, setMetadata] = useState();\n  const [isLoaded, setIsLoaded] = useState();\n\n\n  useEffect(() => {\n    if (!isLoaded && !metadata?.version) {\n      loadMetadata(request, metadata, setMetadata, setIsLoaded);\n    }\n  }, [isLoaded, request]);\n\n  return <div style={{color: \"#000000\"}}>{isLoaded ? <JsonToTable json={metadata} /> : <></>}</div>;\n};\n\nexport default Requests;\n","import { useQuery } from \"@apollo/react-hooks\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\nimport React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { Body, Button, Header, Image, Link } from \"./components\";\nimport useWeb3Modal from \"./hooks/useWeb3Modal\";\n\nimport { addresses, abis } from \"@project/contracts\";\nimport GET_TRANSFERS from \"./graphql/subgraph\";\nimport Requests from \"./components/Requests\";\n\nimport {getTransactions} from './SafeTransactionReader.js';\n\nasync function readOnChainData() {\n  // Should replace with the end-user wallet, e.g. Metamask\n  const defaultProvider = getDefaultProvider();\n  // Create an instance of an ethers.js Contract\n  // Read more about ethers.js on https://docs.ethers.io/v5/api/contract/contract/\n  const ceaErc20 = new Contract(\n    addresses.ceaErc20,\n    abis.erc20,\n    defaultProvider\n  );\n  // A pre-defined address that owns some CEAERC20 tokens\n  const tokenBalance = await ceaErc20.balanceOf(\n    \"0x3f8CB69d9c0ED01923F11c829BaE4D9a4CB6c82C\"\n  );\n  console.log({ tokenBalance: tokenBalance.toString() });\n}\n\nfunction WalletButton({ provider, loadWeb3Modal, logoutOfWeb3Modal }) {\n  const [account, setAccount] = useState(\"\");\n  const [rendered, setRendered] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchAccount() {\n      try {\n        if (!provider) {\n          return;\n        }\n\n        // Load the user's accounts.\n        const accounts = await provider.listAccounts();\n        setAccount(accounts[0]);\n\n        // Resolve the ENS name for the first account.\n        const name = await provider.lookupAddress(accounts[0]);\n\n        // Render either the ENS name or the shortened account address.\n        if (name) {\n          setRendered(name);\n        } else {\n          setRendered(account.substring(0, 6) + \"...\" + account.substring(36));\n        }\n      } catch (err) {\n        setAccount(\"\");\n        setRendered(\"\");\n        console.error(err);\n      }\n    }\n    fetchAccount();\n  }, [account, provider, setAccount, setRendered]);\n\n  return (\n    <Button\n      onClick={() => {\n        if (!provider) {\n          loadWeb3Modal();\n        } else {\n          logoutOfWeb3Modal();\n        }\n      }}\n    >\n      {rendered === \"\" && \"Connect Wallet\"}\n      {rendered !== \"\" && rendered}\n    </Button>\n  );\n}\n\nfunction App() {\n  const { loading, error, data } = useQuery(GET_TRANSFERS);\n  const [provider, loadWeb3Modal, logoutOfWeb3Modal] = useWeb3Modal();\n  const [pendingRequests, setPendingRequests] = useState();\n  const [completedRequests, setCompletedRequests] = useState();\n  const [requests, setRequests] = useState();\n  const [isLoaded, setLoaded] = useState();\n\n  React.useEffect(() => {\n    if (!loading && !error && data && data.transfers) {\n      console.log({ transfers: data.transfers });\n    }\n    getTransactions(\n      setPendingRequests,\n      setCompletedRequests,\n      setRequests,\n      setLoaded\n    );\n  }, [loading, error, data]);\n\n  return (\n    <div>\n      <Header>\n        <WalletButton\n          provider={provider}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n        />\n      </Header>\n      {isLoaded ? (\n        <Body>\n          <Requests requests={pendingRequests} title={\"Pending Requests\"} key={\"PendingTransactions\"}/>\n          <Requests requests={completedRequests} title={\"Completed Requests\"} key={\"CompletedTransactions\"}/>\n        </Body>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import \"./index.css\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\n// You should replace this url with your own and put it into a .env file\n// See all subgraphs: https://thegraph.com/explorer/\nconst client = new ApolloClient({\n  uri: \"https://api.thegraph.com/subgraphs/name/paulrberg/create-eth-app\",\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}