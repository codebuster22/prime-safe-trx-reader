{"version":3,"sources":["components/Requests.jsx","components/index.js","hooks/useWeb3Modal.js","graphql/subgraph.js","App.js","index.js"],"names":["Request","request","useState","metadata","setMetadata","isLoaded","setIsLoaded","loadMetadata","a","version","nonce","hashInBytes","dataDecoded","parameters","length","value","str","slice","hash","Buffer","toString","fetch","response","json","data","JSON","parse","useEffect","style","color","Requests","requests","title","Container","id","defaultActiveKey","sm","map","index","Item","action","href","none","Content","Pane","eventKey","Header","styled","header","Body","div","Button","img","attrs","target","rel","button","props","hidden","INFURA_ID","NETWORK","useWeb3Modal","config","provider","setProvider","autoLoaded","setAutoLoaded","autoLoad","infuraId","network","web3Modal","useMemo","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","loadWeb3Modal","useCallback","connect","newProvider","Web3Provider","logoutOfWeb3Modal","clearCachedProvider","window","location","reload","cachedProvider","GET_TRANSFERS","gql","sortPendingRequests","filter","isExecuted","sortCompletedRequests","sortRequests","method","getTransactions","setPendingRequests","setCompletedRequests","setRequests","setLoaded","results","WalletButton","account","setAccount","rendered","setRendered","listAccounts","accounts","lookupAddress","name","substring","console","error","fetchAccount","onClick","App","useQuery","loading","pendingRequests","completedRequests","React","transfers","log","client","ApolloClient","uri","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.ca913e6c.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Tab, Row, Col, ListGroup } from \"react-bootstrap\";\nimport { JsonToTable } from \"react-json-to-table\";\n\nconst Requests = ({ requests, title }) => {\n  const [metadatas, setMetadata] = useState();\n\n  const renderRequestItems = () => {\n    return requests.map((request, index) => (\n      <ListGroup.Item action href={`#link${index + 1}`} key={request.none}>\n        {`${request.nonce}`}\n      </ListGroup.Item>\n    ));\n  };\n\n  const renderRequestPanes = () => {\n    return requests.map((request, index) => (\n      <Tab.Pane eventKey={`#link${index + 1}`} key={request.none}>\n        <Request request={request} />\n      </Tab.Pane>\n    ));\n  };\n\n  useEffect(() => {});\n  return (\n    <>\n      <h1>{title}</h1>\n      <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#link1\">\n        <Row>\n          <Col sm={4}>\n            <ListGroup>{renderRequestItems()}</ListGroup>\n          </Col>\n          <Col sm={8}>\n            <Tab.Content>{renderRequestPanes()}</Tab.Content>\n          </Col>\n        </Row>\n      </Tab.Container>\n    </>\n  );\n};\n\nfunction hexToString(str) {\n  const buf = new Buffer(str, \"hex\");\n  return buf.toString(\"utf8\");\n}\n\nconst Request = ({ request }) => {\n  const [metadata, setMetadata] = useState();\n  const [isLoaded, setIsLoaded] = useState();\n\n  const loadMetadata = async (request) => {\n    if (!metadata?.version && request?.nonce) {\n      const hashInBytes = request.dataDecoded.parameters[request.dataDecoded.parameters.length-1].value;\n      const hash = hexToString(hashInBytes.slice(2));\n      const response = await fetch(`https://ipfs.io/ipfs/${hash}`);\n      const data = await response.json();\n      setMetadata(JSON.parse(data));\n      if (data) {\n        setIsLoaded(true);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!isLoaded) {\n      loadMetadata(request);\n    }\n  }, [isLoaded, request]);\n\n  return <div style={{color: \"#000000\"}}>{isLoaded ? <JsonToTable json={metadata} /> : <></>}</div>;\n};\n\nexport default Requests;\n","import styled from \"styled-components\";\n\nexport const Header = styled.header`\n  background-color: #282c34;\n  min-height: 70px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  color: white;\n`;\n\nexport const Body = styled.div`\n  align-items: center;\n  background-color: #282c34;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n  justify-content: center;\n  min-height: calc(100vh - 70px);\n`;\n\nexport const Image = styled.img`\n  height: 40vmin;\n  margin-bottom: 16px;\n  pointer-events: none;\n`;\n\nexport const Link = styled.a.attrs({\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n})`\n  color: #61dafb;\n  margin-top: 10px;\n`;\n\nexport const Button = styled.button`\n  background-color: white;\n  border: none;\n  border-radius: 8px;\n  color: #282c34;\n  cursor: pointer;\n  font-size: 16px;\n  text-align: center;\n  text-decoration: none;\n  margin: 0px 20px;\n  padding: 12px 24px;\n\n  ${props => props.hidden && \"hidden\"} :focus {\n    border: none;\n    outline: none;\n  }\n`;\n","import { Web3Provider } from \"@ethersproject/providers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Web3Modal from \"web3modal\";\n\n// Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\nconst INFURA_ID = \"INVALID_INFURA_KEY\";\n\nconst NETWORK = \"mainnet\";\n\nfunction useWeb3Modal(config = {}) {\n  const [provider, setProvider] = useState();\n  const [autoLoaded, setAutoLoaded] = useState(false);\n  const { autoLoad = true, infuraId = INFURA_ID, network = NETWORK } = config;\n\n  // Web3Modal also supports many other wallets.\n  // You can see other options at https://github.com/Web3Modal/web3modal\n  const web3Modal = useMemo(() => {\n    return new Web3Modal({\n      network,\n      cacheProvider: true,\n      providerOptions: {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId,\n          },\n        },\n      },\n    });\n  }, [infuraId, network]);\n\n  // Open wallet selection modal.\n  const loadWeb3Modal = useCallback(async () => {\n    const newProvider = await web3Modal.connect();\n    setProvider(new Web3Provider(newProvider));\n  }, [web3Modal]);\n\n  const logoutOfWeb3Modal = useCallback(\n    async function () {\n      await web3Modal.clearCachedProvider();\n      window.location.reload();\n    },\n    [web3Modal],\n  );\n\n  // If autoLoad is enabled and the the wallet had been loaded before, load it automatically now.\n  useEffect(() => {\n    if (autoLoad && !autoLoaded && web3Modal.cachedProvider) {\n      loadWeb3Modal();\n      setAutoLoaded(true);\n    }\n  }, [autoLoad, autoLoaded, loadWeb3Modal, setAutoLoaded, web3Modal.cachedProvider]);\n\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;\n","import { gql } from \"apollo-boost\";\n\n// See more example queries on https://thegraph.com/explorer/subgraph/paulrberg/create-eth-app\nconst GET_TRANSFERS = gql`\n  {\n    transfers(first: 10) {\n      id\n      from\n      to\n      value\n    }\n  }\n`;\n\nexport default GET_TRANSFERS;\n","import { useQuery } from \"@apollo/react-hooks\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\nimport React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { Body, Button, Header, Image, Link } from \"./components\";\nimport useWeb3Modal from \"./hooks/useWeb3Modal\";\n\nimport { addresses, abis } from \"@project/contracts\";\nimport GET_TRANSFERS from \"./graphql/subgraph\";\nimport Requests from \"./components/Requests\";\n\nconst baseURI =\n  \"https://safe-transaction.gnosis.io/api/v1/safes/0x52F50f557704938Df066EC4Db7426D66538E7796/multisig-transactions/\";\n\nconst sortPendingRequests = (requests) =>\n  requests.filter((request) => !request.isExecuted);\n\nconst sortCompletedRequests = (requests) =>\n  requests.filter((request) => request.isExecuted);\n\nconst sortRequests = (requests) => requests.filter((request) => request.dataDecoded.method === \"deployLBPManager\" || request.dataDecoded.method === \"deploySeed\");\n\nconst getTransactions = async (\n  setPendingRequests,\n  setCompletedRequests,\n  setRequests,\n  setLoaded\n) => {\n  const response = await fetch(baseURI);\n  const requests = sortRequests((await response.json()).results);\n  setRequests(requests);\n  setPendingRequests(sortPendingRequests(requests));\n  setCompletedRequests(sortCompletedRequests(requests));\n  if (requests.length) setLoaded(true);\n};\n\nasync function readOnChainData() {\n  // Should replace with the end-user wallet, e.g. Metamask\n  const defaultProvider = getDefaultProvider();\n  // Create an instance of an ethers.js Contract\n  // Read more about ethers.js on https://docs.ethers.io/v5/api/contract/contract/\n  const ceaErc20 = new Contract(\n    addresses.ceaErc20,\n    abis.erc20,\n    defaultProvider\n  );\n  // A pre-defined address that owns some CEAERC20 tokens\n  const tokenBalance = await ceaErc20.balanceOf(\n    \"0x3f8CB69d9c0ED01923F11c829BaE4D9a4CB6c82C\"\n  );\n  console.log({ tokenBalance: tokenBalance.toString() });\n}\n\nfunction WalletButton({ provider, loadWeb3Modal, logoutOfWeb3Modal }) {\n  const [account, setAccount] = useState(\"\");\n  const [rendered, setRendered] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchAccount() {\n      try {\n        if (!provider) {\n          return;\n        }\n\n        // Load the user's accounts.\n        const accounts = await provider.listAccounts();\n        setAccount(accounts[0]);\n\n        // Resolve the ENS name for the first account.\n        const name = await provider.lookupAddress(accounts[0]);\n\n        // Render either the ENS name or the shortened account address.\n        if (name) {\n          setRendered(name);\n        } else {\n          setRendered(account.substring(0, 6) + \"...\" + account.substring(36));\n        }\n      } catch (err) {\n        setAccount(\"\");\n        setRendered(\"\");\n        console.error(err);\n      }\n    }\n    fetchAccount();\n  }, [account, provider, setAccount, setRendered]);\n\n  return (\n    <Button\n      onClick={() => {\n        if (!provider) {\n          loadWeb3Modal();\n        } else {\n          logoutOfWeb3Modal();\n        }\n      }}\n    >\n      {rendered === \"\" && \"Connect Wallet\"}\n      {rendered !== \"\" && rendered}\n    </Button>\n  );\n}\n\nfunction App() {\n  const { loading, error, data } = useQuery(GET_TRANSFERS);\n  const [provider, loadWeb3Modal, logoutOfWeb3Modal] = useWeb3Modal();\n  const [pendingRequests, setPendingRequests] = useState();\n  const [completedRequests, setCompletedRequests] = useState();\n  const [requests, setRequests] = useState();\n  const [isLoaded, setLoaded] = useState();\n\n  React.useEffect(() => {\n    if (!loading && !error && data && data.transfers) {\n      console.log({ transfers: data.transfers });\n    }\n    getTransactions(\n      setPendingRequests,\n      setCompletedRequests,\n      setRequests,\n      setLoaded\n    );\n  }, [loading, error, data]);\n\n  return (\n    <div>\n      <Header>\n        <WalletButton\n          provider={provider}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n        />\n      </Header>\n      {isLoaded ? (\n        <Body>\n          <Requests requests={pendingRequests} title={\"Pending Requests\"} />\n          <Requests requests={completedRequests} title={\"Completed Requests\"} />\n        </Body>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import \"./index.css\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\n// You should replace this url with your own and put it into a .env file\n// See all subgraphs: https://thegraph.com/explorer/\nconst client = new ApolloClient({\n  uri: \"https://api.thegraph.com/subgraphs/name/paulrberg/create-eth-app\",\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}